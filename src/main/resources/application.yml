server:
  port: 80

spring:
  profiles.active: local
  # 데이터 소스 설정
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3307/greendb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    username: GREENTHUMB
    password: GREENTHUMB
  #    hikari:
  #      pool-name: jpa-hikari-pool
  #      maximum-pool-size: 5
  #      jdbc-url: ${spring.datasource.url}
  #      username: ${spring.datasource.username}
  #      password: ${spring.datasource.password}
  #      driver-class-name: ${spring.datasource.driver-class-name}
  #      data-source-properties:
  #        rewriteBatchedStatements: true
  # JPA 설정
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: update
    #          ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
  #        format_sql: true
  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: 56920934061-e39v2qnmlpusl8d7f70a255jj2qubr46.apps.googleusercontent.com
          clientSecret: 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
          scope:
            - email
            - profile
        #        facebook:
        #          clientId: '{페이스북 client-id}'
        #          clientSecret: '{페이스북 client-secret}'
        #          scope:
        #            - email
        #            - public_profile
        naver:
          clientId: Djd0Qu5DOQvI3TRTy4lc
          clientSecret: fng6cU7BA2
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - nickname
            - email
            - profile_image
          clientName: Naver
        kakao:
          clientId: 21aed1b098b633c8e828769c86668c14
          clientSecret: vQVcKUHo6xsJL4RnbyI4TRSKE5wOFcCP
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - profile_nickname
            - profile_image
            - account_email
          clientName: Kakao
      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

# cors 설정
cors:
  allowed-origins: 'http://localhost:8081'
  allow-credentials: true
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    accessTokenExpiry: 3000000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://localhost:8081